import assert from 'power-assert';
import { Word, Binary3 } from './types';
import { b } from './helpers';
import { mux8way16 } from './mux8way16';

describe('mux8way16', function () {
  it('should return correct Binary', function () {
    assert.deepEqual(
      mux8way16(
        b<Word>('1000 0000 0000 0000'),
        b<Word>('0100 0000 0000 0000'),
        b<Word>('0010 0000 0000 0000'),
        b<Word>('0001 0000 0000 0000'),
        b<Word>('0000 1000 0000 0000'),
        b<Word>('0000 0100 0000 0000'),
        b<Word>('0000 0010 0000 0000'),
        b<Word>('0000 0001 0000 0000'),
        b<Binary3>('000'),
      ),
      b<Word>('1000 0000 0000 0000'),
    );
    assert.deepEqual(
      mux8way16(
        b<Word>('1000 0000 0000 0000'),
        b<Word>('0100 0000 0000 0000'),
        b<Word>('0010 0000 0000 0000'),
        b<Word>('0001 0000 0000 0000'),
        b<Word>('0000 1000 0000 0000'),
        b<Word>('0000 0100 0000 0000'),
        b<Word>('0000 0010 0000 0000'),
        b<Word>('0000 0001 0000 0000'),
        b<Binary3>('001'),
      ),
      b<Word>('0100 0000 0000 0000'),
    );
    assert.deepEqual(
      mux8way16(
        b<Word>('1000 0000 0000 0000'),
        b<Word>('0100 0000 0000 0000'),
        b<Word>('0010 0000 0000 0000'),
        b<Word>('0001 0000 0000 0000'),
        b<Word>('0000 1000 0000 0000'),
        b<Word>('0000 0100 0000 0000'),
        b<Word>('0000 0010 0000 0000'),
        b<Word>('0000 0001 0000 0000'),
        b<Binary3>('010'),
      ),
      b<Word>('0010 0000 0000 0000'),
    );
    assert.deepEqual(
      mux8way16(
        b<Word>('1000 0000 0000 0000'),
        b<Word>('0100 0000 0000 0000'),
        b<Word>('0010 0000 0000 0000'),
        b<Word>('0001 0000 0000 0000'),
        b<Word>('0000 1000 0000 0000'),
        b<Word>('0000 0100 0000 0000'),
        b<Word>('0000 0010 0000 0000'),
        b<Word>('0000 0001 0000 0000'),
        b<Binary3>('011'),
      ),
      b<Word>('0001 0000 0000 0000'),
    );
    assert.deepEqual(
      mux8way16(
        b<Word>('1000 0000 0000 0000'),
        b<Word>('0100 0000 0000 0000'),
        b<Word>('0010 0000 0000 0000'),
        b<Word>('0001 0000 0000 0000'),
        b<Word>('0000 1000 0000 0000'),
        b<Word>('0000 0100 0000 0000'),
        b<Word>('0000 0010 0000 0000'),
        b<Word>('0000 0001 0000 0000'),
        b<Binary3>('100'),
      ),
      b<Word>('0000 1000 0000 0000'),
    );
    assert.deepEqual(
      mux8way16(
        b<Word>('1000 0000 0000 0000'),
        b<Word>('0100 0000 0000 0000'),
        b<Word>('0010 0000 0000 0000'),
        b<Word>('0001 0000 0000 0000'),
        b<Word>('0000 1000 0000 0000'),
        b<Word>('0000 0100 0000 0000'),
        b<Word>('0000 0010 0000 0000'),
        b<Word>('0000 0001 0000 0000'),
        b<Binary3>('101'),
      ),
      b<Word>('0000 0100 0000 0000'),
    );
    assert.deepEqual(
      mux8way16(
        b<Word>('1000 0000 0000 0000'),
        b<Word>('0100 0000 0000 0000'),
        b<Word>('0010 0000 0000 0000'),
        b<Word>('0001 0000 0000 0000'),
        b<Word>('0000 1000 0000 0000'),
        b<Word>('0000 0100 0000 0000'),
        b<Word>('0000 0010 0000 0000'),
        b<Word>('0000 0001 0000 0000'),
        b<Binary3>('110'),
      ),
      b<Word>('0000 0010 0000 0000'),
    );
    assert.deepEqual(
      mux8way16(
        b<Word>('1000 0000 0000 0000'),
        b<Word>('0100 0000 0000 0000'),
        b<Word>('0010 0000 0000 0000'),
        b<Word>('0001 0000 0000 0000'),
        b<Word>('0000 1000 0000 0000'),
        b<Word>('0000 0100 0000 0000'),
        b<Word>('0000 0010 0000 0000'),
        b<Word>('0000 0001 0000 0000'),
        b<Binary3>('111'),
      ),
      b<Word>('0000 0001 0000 0000'),
    );
  });
});
